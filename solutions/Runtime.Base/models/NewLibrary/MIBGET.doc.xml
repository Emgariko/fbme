<?xml version="1.0" encoding="UTF-8"?>  
<section xmlns="http://docbook.org/ns/docbook"
        xmlns:xi="http://www.w3.org/2001/XInclude"
        xmlns:xlink="http://www.w3.org/1999/xlink">
  <info>
    <author>
       <personname>
          <firstname></firstname>
          <surname></surname>
       </personname>
       <email></email>
    </author>
    <abstract><wysiwyg_a><p>This function block is internally used for diagnostic information. (MIB: Management Information Base)</p><p>It serves to get information by SNMP (Single Network Management Protocol) from the PLC's.</p><p>
</p><p /><p>This is a generic function block, the number of information-'PATH's can be defined from 1 to 16.</p><p>(More information about generic blocks: Studio help (press F1) at Solution→Distributed PAC Project→Editors→System Editor)</p><p /><p>
</p><p /><p>
</p><p /><p>
</p><p /><p>
  </p></wysiwyg_a></abstract>
  </info>
<wysiwyg><p>
    <strong>Temporal Behavior</strong> </p><p>'INIT'-Event input:</p><p>Performs the initialization and captures the QI-input</p><p> -If input 'QI' is TRUE the initialization of the block can happen</p><p>  'QO' is set to TRUE</p><p>  'INITO' is fired</p><p> -If input 'QI' is FALSE the block will be deinitialized</p><p>  'QO' is set to FALSE</p><p>  'INITO' is fired</p><p> </p><p>'REQ'-Event input: </p><p> -If 'QI' is TRUE and 'INIT' has worked properly it executes the writing of the message</p><p>   A 'CNF'-Event is fired</p><p> -If 'QI' is FALSE only a 'CNF'-Event is fired, no further action</p><p> </p><p> </p><p>
</p><p>
</p><p><strong>Functional Behavior</strong></p><p>'QI'-input:</p><p> -If TRUE, function block can be initialized.</p><p> -If set FALSE the block will be deinitialized.</p><p> </p><p>'PATHn'-input:</p><p> defines the path from which the information has to be get. (i.e. Device.Name or System.CurrentTime etc.)</p><p> </p><p>'INDEXn'-input:</p><p> Default value is 0, this works with all information except tables. Use data type STRING with no entry to have the whole information provided at output VALUEn in a comma separated form. To read some specific part of information out of an array, 'INDEXn' has to be set as required. When using data type UDINT and value 0 at INDEXn the output VALUEn provides the whole information in a comma separated form with data type STRING at VALUEn. (see example below)</p><p> Whether to use data type UDINT or STRING for the INDEXn-input for the specific case has to be taken out of the description of the specific value (i.e. network interfaces are indicated with UDINT, Resources with STRING - i.e. RES1 → see the link to the list of all supported SNMP OIDs below).</p><p> </p><p>
</p><p>'QO'-output:</p><p> Shows status of the block (TRUE is ready, FALSE is deinitialized)</p><p> </p><p>'STATUSn'-output:</p><p> Provides status information, such as OK or specific error messages (i.e. 'not initialized' if 'QI' is FALSE and 'REQ' is fired, 'No MIB entry' if no or a wrong 'PATH' is used, or 'No instance' if a wrong 'INDEXn' is used). When 'QI' is FALSE and 'INIT' was triggered, 'STATUSn' shows OK to state that the deinitializing has been done properly.</p><p> </p><p>'VALUEn'-output:</p><p>
</p><p /><p> Provides the requested information.</p><p>When using data type STRING at output VALUEn and the respective input INDEXn is empty (input data type STRING) or 0 (input data type UDINT) the whole information is shown in a comma separated form. In some cases some other data types are valid too (e.g. for INDEX Project.ApplicationForcesActive : DINT). See the link for the list of all supported SNMP OIDs below.</p><p>When using data type DINT at output VALUEn and the respective input INDEXn is STRING (use this form for the STRING: &lt;Source_Resource&gt;.&lt;Destination_Device&gt;.&lt;Destination_Resource&gt; (e.g. RES0.DEV1.RES1)) VALUEn outputs the value for the specified channel. (There is an example for this case below at <em>Example for the usage of data type DINT at output VALUEn</em>.)</p><p> </p><div class="img" style="FLOAT: none"><img src="Images/MIBGET_ExampleGeneral.png" /></div><p>
</p><p> </p><p> </p><div class="tip" style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<table border="0">
<tbody>
<tr>
<td valign="top" rowspan="2" width="25" align="center"><img alt="[tip]" src="${DocImages}/tip.png" /></td>
<th align="left">List of all supported SNMP OIDs</th></tr>
<tr>
<td valign="top" align="left">
<p>Click here to view a list of all available OIDs: <a href="Images/nxtIEC61499F.txt">List</a></p>
<p>Please note: INDEX <em>Network.Peers.*</em> require the use of runtime version r16836 (or higher) on all devices.</p></td></tr></tbody></table></div><p>
</p><p> </p><p><u>Some additional information about the INDEX 'Network.Peers.*':</u></p><p>Basically, the communication of the MIBGET works unidirectionally. The diversification of the function block with the index <em>Network.Peers.*</em>  was implemented to check also the reachability of another runtime.</p><p>The index <em>Network.Peers.RemoteResource</em> provides the information which resources basically should have a communication to the resource the MIBGET FB belongs to. It doesn't check whether the communication works, but only whether there is a connection implemented in the project.</p><p>The index <em>Network.Peers.Up</em>, on the other hand, shows whether the communication currently works (down = 0 or up = 1).</p><p>Example for a MIBGET, shown with watch points:</p><p /><div class="img"><img src="Images/MIBGET_Network.Peers.png" /></div><p /><p> </p><p><u>Example for the usage of data type DINT at output VALUEn:</u></p><p>This example refers to the usage of <em>Network.Peers.Up</em> at input INDEXn.</p><p>Procedure for correct usage:</p><p>- Open the <em>Generic Interface Editor</em> via context menu, after a right-click on the small icon in the bottom right corner of the FB, and set the respective input INDEXn to data type STRING.</p><p>- Set the respective output VALUEn to data type DINT. </p><p>- Add a constant at INDEXn that defines the communication peer to be checked (in this example the communication from resource RES0 to RES1 of DEV1 → RES0.DEV1.RES1). </p><p>- The respective output VALUEn provides the value of the required information.</p><div class="img"><img src="Images/MIBGET_Example1_Constants.png" /></div><p>
</p><p> </p><p> </p><p>Status and value information is updated after each triggered REQ event. A wrong definition at input INDEXn would lead to an error message (No instance) at output STATUSn:</p><div class="img"><img src="Images/MIBGET_Example2_STATUSError.png" /></div><p>
</p><p> </p><p> </p><p /><p>
</p><p /><p>
  </p></wysiwyg></section>

