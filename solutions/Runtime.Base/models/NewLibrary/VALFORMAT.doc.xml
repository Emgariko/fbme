<?xml version="1.0" encoding="UTF-8"?>  
<section xmlns="http://docbook.org/ns/docbook"
        xmlns:xi="http://www.w3.org/2001/XInclude"
        xmlns:xlink="http://www.w3.org/1999/xlink">
  <info>
    <author>
       <personname>
          <firstname></firstname>
          <surname></surname>
       </personname>
       <email></email>
    </author>
    <abstract><wysiwyg_a><p>This function block converts input values which can be numerical values or strings into a string, where the format is defined by a string at an extra input. The resulting string is written to the output and an output event is generated. </p><p>It is a generic block. The number of inputs can be defined from 1 to 16.</p><p>(More information about generic blocks: Studio help (press F1) at Solution→Distributed PAC Project→Editors→System Editor)</p><p /><p>
  </p></wysiwyg_a></abstract>
  </info>
<wysiwyg><p>
    <strong>Temporal Behavior</strong> </p><p>'REQ'-Event input: </p><p>Each 'REQ'-Event reads the string form the 'FORMAT'-input and processes it. The string is parsed (which could also result in an error) and the numerical values supplied at the 'VALUEn' inputs are converted into a string according to the format-string. The result is written to the 'RESULT'-output and a 'CNF'-Event is fired.</p><p>'CNF'-Event output:</p><p>This event output is fired after every 'REQ'.</p><p> </p><p><strong>Functional Behavior</strong> </p><p>'FORMAT' input:</p><p>The format string definition is compatible to the one of the 'C'-language library function 'printf(format, ... )'.</p><p>The string 'FORMAT' consists of two types of items - characters that will be printed to the 'RESULT' string, and format commands that define how the other arguments ('VALUE1' ... 'VALUEn') are converted. Basically, a format string is specified which has text in it, as well as "special" characters that map to the other arguments 'VALUE1' ... 'VALUEn'.</p><p>The %s means, "insert the first argument, a string, right here." The %d indicates that the second argument (an integer) should be placed there. There are different %-codes for different variable types, as well as options to limit the length of the variables. The arguments have to be in the same order as the 'VALUE1-n' inputs are, beginning with 'VALUE1'.</p><ul>
<li>%d         type: int, output format: signed decimal integer</li>
<li>%i          type: int, output format: signed decimal integer</li>
<li>%o         type: int, output format: unsigned octal integer</li>
<li>%u         type: int, output format: unsigned decimal integer</li>
<li>%x         type: int, output format: unsigned hexadecimal integer, using "abcdef"</li>
<li>%X         type: int, output format: unsigned hexadecimal integer, using "ABCDEF"</li>
<li>%e         type: double, output format: scientific notation, with a lowercase "e"</li>
<li>%E         type: double, output format: scientific notation, with an uppercase "E"</li>
<li>%f          type: double, output format: floating point (eg: %.2f type: double, 2 digits after decimal point)</li>
<li>%s         type: string, output format: string</li>
<li>%c         type: char, output format: char</li>
<li>%%        type: char, output "%" sign </li></ul><p>An integer placed between a % sign and the format command acts as a minimum field specifier, and pads the output with spaces or zeros to make it long enough. If zeros shall be padded, a zero should be placed before the minimum field width specifier. </p><p>example:  FORMAT := "%04X", VALUE1 :=  220 generates the following output at RESULT := "00DC"  </p><p>A precision modifier can be placed, which has different meanings depending on the format code being used. With %e, %E and %f, the precision modifier lets specify the number of decimal places desired. (eg: %10.5f will generate a floating number at least 10 digits wide, with 5 decimal places).</p><p> </p><p>'VALUE1-n' input:</p><p>Data inputs, format selectable. The values of this inputs are passed to the 'RESULT' output accordingly with the characters and definition at input 'FORMAT'.</p><p>'RESULT' output:</p><p>Prints the string to the 'RESULT'-output according to the 'FORMAT'-input string and the values passed in 'VALUE1' ... 'VALUEn'. </p><p>
</p><p /><p>
  </p></wysiwyg></section>

