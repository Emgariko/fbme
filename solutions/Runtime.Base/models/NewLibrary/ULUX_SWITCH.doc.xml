<?xml version="1.0" encoding="UTF-8"?>  
<section xmlns="http://docbook.org/ns/docbook"
        xmlns:xi="http://www.w3.org/2001/XInclude"
        xmlns:xlink="http://www.w3.org/1999/xlink">
  <info>
    <author>
       <personname>
          <firstname></firstname>
          <surname></surname>
       </personname>
       <email></email>
    </author>
    <abstract><wysiwyg_a><p>This function block represents an instance of u::Lux switch</p><p>It handles both the configuration (assigning an IP address, flashing the firmware) and operation. For accessing the data of the switch the ULUX_IN and ULUX_OUT satellite function blocks are used.</p><p>
  </p></wysiwyg_a></abstract>
  </info>
<wysiwyg><p>
    <strong>Initializing</strong>
  </p><p>Each switch is addressed via its IP address. The IPAddress, IPNetmaskWidth and IPGateway have to be set at the 'INIT' time. If the switch has to broadcast the data to other PLCs (not used at the moment), DestinationIP has to be set as well.</p><p><strong>Commissioning</strong></p><p>After an installation of the new switch it has to be commissioned, i.e. the MAC address has to be determined and IP address assigned to it. To efficiently do this the u::Lux switch provides a way to send a message allowing to identify itself. The process is then as follows</p><ul>
<li>set 00:00:00:00:00:00 as MACAddress</li>
<li>fire the 'COMMISSION' event. The StateStr changes to 'Commissioning'. Now you have 1 minute to perform the next step</li>
<li>on the switch itself perform an action to send the commissioning message (the exact way is to be defined, the new switches will be delivered with this possibility)</li>
<li>the MACAddressOut gives the switch's MAC address and the 'COMMISSIONED_IND' fires</li>
<li>persistently save the MAC address and loop it back to the MACAddress input</li></ul><p><strong>Assigning / changing the IP address</strong></p><p>If the MAC address of the switch is known, the next step is to assign an IP address to it.</p><ul>
<li>if the switch already had an address and the State is Running, fire a 'STOP' event first and wait for 'STOP_CNF'</li>
<li>fire 'SET_IP' to set and 'ERASE_IP' to remove the IP address. The operation will be confirmed by corresponding output events</li>
<li>depending on the IP addresses and state of the operating system's ARP tables the operation can seem to time out but in fact complete successfully. When changing an already allocated IP address it is recommended to erase it first, wait several seconds and then to set it</li></ul><p><strong>Operation</strong></p><p>If at the time of 'INIT' a switch with matching MAC and IP is found, the state changes to 'HasIP' and the 'CONFIGURED_IND' event fires. This event can be routed back to the 'START' event, which triggers the following</p><ul>
<li>the firmware running in the switch is checked</li>
<li>if it differs from the one present in the project, it is flashed</li>
<li>the switch is configured and provided with the current date/time</li>
<li>the current data are read</li>
<li>the 'RUNNING_IND' event fires</li></ul><p>Now the switch can be interacted with using the ULUX_IN/ULUX_OUT function blocks.</p><p>The 'STOP' event stops the switch. This is necessary to change its IP address.</p><p>The 'RESTART' event stops the switch and then runs the sequence described for 'START'.</p><p><strong>States</strong></p><p>The State output presents a numerical state that can be together with 'STATE_IND' be used to perform some checks/indications in the CAT. The StateStr gives this information in a text form and the Error output contains additional information in the case of an error.</p><p>
</p><table class="table" style="WIDTH: 50%" cols="3" width="50%" border="2">
<caption>State and StateStr</caption>
<thead>
<tr>
<td width="10%">State</td>
<td width="25%">StateStr</td>
<td width="65%">Meaning</td></tr></thead>
<tbody>
<tr>
<td>0</td>
<td>Not initialized</td>
<td>No event yet</td></tr>
<tr>
<td>1</td>
<td>Initialized</td>
<td>Initialized, but switch not found (yet)</td></tr>
<tr>
<td>2</td>
<td>Setting IP</td>
<td>In the process of setting an IP address</td></tr>
<tr>
<td>3</td>
<td>Has IP</td>
<td>MAC/IP match and found</td></tr>
<tr>
<td>4</td>
<td>Checking Firmware</td>
<td>Checking if the firmware has to be updated</td></tr>
<tr>
<td>5</td>
<td>Flashing</td>
<td>Updating the firmware</td></tr>
<tr>
<td>6</td>
<td>Waiting for init request</td>
<td>temporary stati while starting</td></tr>
<tr>
<td>7</td>
<td>Waiting for init done</td>
<td /></tr>
<tr>
<td>8</td>
<td>Waiting for initial values</td>
<td /></tr>
<tr>
<td>9</td>
<td>Running</td>
<td>Switch operating normally</td></tr>
<tr>
<td>10</td>
<td>Commissioning</td>
<td>Waiting for the physical action on the switch</td></tr>
<tr>
<td>11</td>
<td>Error</td>
<td>The last operation ended with error</td></tr></tbody></table><p>
  </p></wysiwyg></section>

