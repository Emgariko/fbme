<?xml version="1.0" encoding="UTF-8"?>  
<section xmlns="http://docbook.org/ns/docbook"
        xmlns:xi="http://www.w3.org/2001/XInclude"
        xmlns:xlink="http://www.w3.org/1999/xlink">
  <info>
    <author>
       <personname>
          <firstname></firstname>
          <surname></surname>
       </personname>
       <email></email>
    </author>
    <abstract><wysiwyg_a><p>This function block reads values which can be numerical values or strings out of a given input string INSTR according to the specified string format FORMAT. The ´read values are provided as outputs VALUEn and an output event is generated. </p><p>It is a generic block. The number of outputs can be defined from 1 to 16.</p><p>(More information about generic blocks: Studio help (press F1) at Solution→Distributed PAC Project→Editors→System Editor)</p><p /><p>
  </p></wysiwyg_a></abstract>
  </info>
<wysiwyg><p>
    <strong>Temporal Behavior</strong> </p><p>'REQ'-Event input: </p><p>Each 'REQ'-Event reads the input strings 'FORMAT' and 'INSTR' and processes them. The format string is parsed (which could also result in an error) and the values defined by the 'VALUEn' outputs are converted from the input string according to the format string. The resulting values are written to the 'output variables and a 'CNF'-Event is fired.</p><p> </p><p><strong>Functional Behavior</strong> </p><p>Reads the designated output values VALUEn from the 'INSTR' input according to the 'FORMAT' input string. The format string definition is compatible to the one of the 'C'-language library function 'scanf(format, ... )'. </p><p>The string 'FORMAT' consists of two types of items - fill characters that may define some separators between dedicated values coded into the input string and format commands that define how the other values 'VALUE1' ... 'VALUEn') have been coded into the input string. Basically, a format string is specified which has text in it, as well as "special" characters that map to the other arguments 'VALUE1' ... 'VALUEn'.</p><p>The %s means, "read the first argument, a string, right here." The %d indicates that the second argument (an integer) should be decoded as second value. There are different %-codes for different variable types, as well as options to limit the length of the variables.</p><p> </p><ul>
<li>%d         type: int, input format: signed decimal integer</li>
<li>%i          type: int, input format: signed decimal integer</li>
<li>%o         type: int, input format: unsigned octal integer</li>
<li>%u         type: int, input format: unsigned decimal integer</li>
<li>%x         type: int, input format: unsigned hexadecimal integer, using "abcdef"</li>
<li>%X         type: int, input format: unsigned hexadecimal integer, using "ABCDEF"</li>
<li>%e         type: double, input format: scientific notation, with a lowercase "e"</li>
<li>%E         type: double, input format: scientific notation, with an uppercase "E"</li>
<li>%f          type: double, input format: floating point (eg: %4f type: double, 4 digits altogether including the decimal point)</li>
<li>%s         type: string, input format: string</li>
<li>%c         type: char, input format: char</li></ul><p>An integer placed between a % sign and the format command acts as a minimum field specifier.</p><p> </p><p>example:  FORMAT := '%3d', INSTR :=  '4210' decodes the following output at VALUE1 (INT) := 421</p><p> </p><p /><p>
  </p></wysiwyg></section>

